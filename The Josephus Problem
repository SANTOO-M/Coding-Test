/*
The Josephus Problem

This classic problem dates back to Roman times. There are 41 soldiers arranged in a circle. Every third soldier is to be killed by their captors, continuing around 
the circle until only one soldier remains. He is to be freed. Assuming you would like to stay alive, at what position in the circle would you stand?
Generalize this problem by creating a function that accepts the number of soldiers n and the interval at which they are killed i, and returns the
position of the fortunate survivor
*/

import java.util.ArrayList;
import java.util.List;
public class RomanCircle {
	public static void main(String args[]) {
	ArrayList<Integer> al=new ArrayList<>(List.of(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
										21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41));
	int count=1,total=0;
	for(int j=0;total<40;j++) {
		for(int i=0;i<41;i++) {
			if(al.get(i)!=0) {
				count++;			
				if(count ==4) {
					al.set(i,0);
					count=1;
					total++;
					if(total==40) 
						break;
				}
		}
	}
	}
	for(int k=0;k<41;k++)if(al.get(k)!=0)
		System.out.println("The safe position is "+al.get(k));
}
}
